import sqlite3
import sys
from datetime import datetime, timedelta


def get_habit_stats(cursor, start_timestamp, end_timestamp):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö
    cursor.execute("SELECT id, name FROM Habits WHERE archived = 0")
    habits = {id: name for id, name in cursor.fetchall()}

    # –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    cursor.execute("""
        SELECT habit, value FROM Repetitions
        WHERE timestamp BETWEEN ? AND ?
    """, (start_timestamp, end_timestamp))
    repetitions = cursor.fetchall()

    # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    habit_stats = {habit: {'total': 0, 'count': 0} for habit in habits.keys()}
    for habit_id, value in repetitions:
        if habit_id in habit_stats:
            adjusted_value = value / 1000
            if habits[habit_id] == "–ù–æ—Ä–º–∞ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º" and adjusted_value < 10:
                adjusted_value *= 1000
            if habit_id == 2:
                print(f'{habit_id} --- {adjusted_value}')
            habit_stats[habit_id]['total'] += adjusted_value
            habit_stats[habit_id]['count'] += 1

    print(habit_stats)
    print("\n================================")

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results = {}
    for habit_id, stats in habit_stats.items():
        if stats['count'] > 0:
            average = round(stats['total'] / stats['count'], 1)
        else:
            average = 0
        total = round(stats['total'], 1)
        results[habits[habit_id]] = {'Average': average, 'Total': total}

    return results


def analyze_current_week(db_path, start_date_str=None, end_date_str=None):
    if not start_date_str or not end_date_str:
        raise ValueError("Start and end dates must be provided in 'dd-mm-yyyy' format.")

    try:
        start_date = datetime.strptime(start_date_str, '%d-%m-%Y')
        end_date = datetime.strptime(end_date_str, '%d-%m-%Y') + timedelta(days=1)

    except ValueError as e:
        raise ValueError("Invalid date format. Please use 'dd-mm-yyyy' format.") from e

    print(f'{start_date=}')
    print(f'{end_date=}')

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    start_timestamp = int(start_date.timestamp() * 1000)
    end_timestamp = int(end_date.timestamp() * 1000)

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    results = get_habit_stats(cursor, start_timestamp, end_timestamp)
    conn.close()

    return results


def analyze_all_before(db_path, date_before):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ Timestamp
    end_date = datetime.strptime(date_before, "%d-%m-%Y")
    end_timestamp = int(end_date.timestamp() * 1000)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞–º–æ–∫ —Å –Ω–∞—á–∞–ª–∞ —ç–ø–æ—Ö–∏ Unix –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    start_timestamp = 0

    results = get_habit_stats(cursor, start_timestamp, end_timestamp)

    conn.close()
    return results


def analyze_and_summarize(current_week_data, all_time_data, habits_where_more_is_worse, habits_without_total):
    summary = []
    for habit, current_data in current_week_data.items():
        all_time_avg = all_time_data.get(habit, {}).get('Average', 0)
        current_avg = current_data.get('Average', 0)
        current_total = current_data.get('Total', 0)

        if habit in habits_where_more_is_worse:
            better = current_avg < all_time_avg
        else:
            better = current_avg > all_time_avg

        if better:
            status = '–ª—É—á—à–µ'
            emoji = 'üòÑ'
        elif current_avg == all_time_avg:
            status = '–æ—Å—Ç–∞–ª–æ—Å—å –∫–∞–∫ –µ—Å—Ç—å'
            emoji = '='
        else:
            status = '—Ö—É–∂–µ'
            emoji = 'üíî'


        if habit in habits_without_total:
            summary.append(f"{emoji}: {habit}, {status}, –±—ã–ª–æ: {all_time_avg}, —Å—Ç–∞–ª–æ: {current_avg}")
        else:
            summary.append(f"{emoji}: {habit}, {status}, –±—ã–ª–æ: {all_time_avg}, —Å—Ç–∞–ª–æ: {current_avg}, total: {round(all_time_avg * 7, 1)} VS {current_total}")

    return '\n'.join(summary)

def define_monday_sunday():
    today = datetime.now()

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ –ø—Ä–æ—à–ª–æ–º
    # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤—ã—á–∏—Ç–∞–µ–º 7 –¥–Ω–µ–π
    if today.weekday() == 0:
        last_monday = today - timedelta(days=7)
    else:
        last_monday = today - timedelta(days=today.weekday())

    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ –±—É–¥—É—â–µ–º –æ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
    next_sunday = last_monday + timedelta(days=6)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    date_monday = last_monday.strftime('%d-%m-%Y')
    date_sunday = next_sunday.strftime('%d-%m-%Y')

    return (date_monday, date_sunday)



db_current_name = 'Loop_2024-01-15.db'


date_monday, date_sunday = define_monday_sunday()
print(f"{date_monday=}, {date_sunday=}")

current_week_data = analyze_current_week(db_current_name, date_monday, date_sunday)
all_time_data = analyze_all_before(db_current_name, date_before=date_sunday)


# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
print("–î–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:")
for habit, data in current_week_data.items():
    print(f"Habit: {habit}, Average: {data['Average']}, Total: {data['Total']}")

print("\n–î–∞–Ω–Ω—ã–µ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è:")
for habit, data in all_time_data.items():
    print(f"Habit: {habit}, Average: {data['Average']}, Total: {data['Total']}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
habits_where_more_is_worse = ['–ù–æ—Ä–º–∞ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º', '–í–µ—Å']  # –ü—Ä–∏–≤—ã—á–∫–∏, –≥–¥–µ –±–æ–ª—å—à–µ –∑–Ω–∞—á–∏—Ç —Ö—É–∂–µ
habits_without_total = ['–í–µ—Å', '–ù–æ—Ä–º–∞ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º', '–£—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏', '–£–º', '–§–∏–∑–∏–∫–∞', '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞']
result = analyze_and_summarize(current_week_data, all_time_data, habits_where_more_is_worse, habits_without_total)
print('==================================')
print(result)
